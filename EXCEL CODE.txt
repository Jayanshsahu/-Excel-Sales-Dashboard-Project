/*
 * This script unhides all rows and columns on a given worksheet.
 * This script does not affect any pre-existing data in the workbook.
 */
function main(workbook: ExcelScript.Workbook) {
  // Get the currently selected sheet.
  const selectedSheet = workbook.getActiveWorksheet();

  // Get the entire data range.
  const range = selectedSheet.getUsedRange();

  // If the used range is empty, end the script.
  if (!range) {
    console.log(`No data on this sheet.`);
    return;
  }

  // Log the address of the used range.
  console.log(`Used range for the worksheet: ${range.getAddress()}`);

  // If no columns are hidden, log message, else, unhide columns
  if (range.getColumnHidden() === false) {
    console.log(`No columns hidden`);
  } else {
    range.setColumnHidden(false);
  }

  // If no rows are hidden, log message, else, unhide rows.
  if (range.getRowHidden() === false) {
    console.log(`No rows hidden`);
  } else {
    range.setRowHidden(false);
  }
}











/*
 * This script removes all hyperlinks in the specified sheet.
 */
function main(workbook: ExcelScript.Workbook) {
  // Get the active worksheet.
  let sheet = workbook.getActiveWorksheet();

  // Get the used range to operate on.
  // For large ranges (over 10000 entries), consider splitting the operation into batches for performance.
  const targetRange = sheet.getUsedRange(true);

  // if the worksheet has no edited cells, finish running the script
  if (targetRange === undefined) {
    console.log(
      `The worksheet is empty, run on a sheet that has edited cells`
    );
    return;
  }
  console.log(
    `Target Range to clear hyperlinks from: ${targetRange.getAddress()}`
  );

  const rowCount = targetRange.getRowCount();
  const colCount = targetRange.getColumnCount();
  console.log(
    `Searching for hyperlinks in ${targetRange.getAddress()} which contains ${
      rowCount * colCount
    } cells`
  );

  // Go through each individual cell looking for a hyperlink.
  // This allows us to limit the formatting changes to only the cells with hyperlink formatting.
  let clearedCount = 0;
  for (let i = 0; i < rowCount; i++) {
    for (let j = 0; j < colCount; j++) {
      const cell = targetRange.getCell(i, j);
      const hyperlink = cell.getHyperlink();
      if (hyperlink) {
        cell.clear(ExcelScript.ClearApplyTo.hyperlinks);
        cell
          .getFormat()
          .getFont()
          .setUnderline(ExcelScript.RangeUnderlineStyle.none);
        cell.getFormat().getFont().setColor("Black");
        clearedCount++;
      }
    }
  }

  console.log(`Done. Cleared hyperlinks from ${clearedCount} cells`);
}











/*
 * This script will take a selected range of a sheet and freeze the selection.
 * This script does not affect pre-existing data in the workbook.
 */
function main(workbook: ExcelScript.Workbook) {
  // Get the currently selected sheet.
  const selectedSheet = workbook.getActiveWorksheet();

  // Get the current selected range.
  const selectedRange = workbook.getSelectedRange();

  // If no cells are selected, end the script.
  if (selectedRange === null) {
    console.log(`No cells in worksheet selected.`);
    return;
  }

  // Log the address of the selected range
  console.log(
    `Selected range for the worksheet: ${selectedRange.getAddress()}`
  );

  // Freeze the selected range.
  selectedSheet.getFreezePanes().freezeAt(selectedRange);
}






/**
 * This script shows how table data can be represented as JSON.
 * The JSON data can then be given to other systems through Power Automate flows.
 * This script does not affect pre-existing data in the workbook.
 *
 * A table is represented in JSON as an array of objects, where each object represents one table row.
 * The objects keys are the column names, and the values are the cell values.
 */
function main(workbook: ExcelScript.Workbook): TableData[] {
  // Get the first table in the "PlainTable" worksheet.
  // If you know the table name, use `workbook.getTable('TableName')` instead.
  const table = workbook.getWorksheet("Sheet1").getTables()[0];

  // Get all the values from the table as text.
  const texts = table.getRange().getTexts();

  // Create an array of JSON objects that match the row structure.
  let returnObjects: TableData[] = [];
  if (table.getRowCount() > 0) {
    returnObjects = returnObjectFromValues(texts);
  }

  // Log the information and return it for a Power Automate flow.
  console.log(JSON.stringify(returnObjects));
  return returnObjects;
}

// This function converts a 2D array of values into a generic JSON object.
// In this case, we have defined the TableData object, but any similar interface would work.
function returnObjectFromValues(values: string[][]): TableData[] {
  let objectArray: TableData[] = [];
  let objectKeys: string[] = [];
  for (let i = 0; i < values.length; i++) {
    if (i === 0) {
      objectKeys = values[i];
      continue;
    }

    let object = {};
    for (let j = 0; j < values[i].length; j++) {
      object[objectKeys[j]] = values[i][j];
    }

    objectArray.push(object as TableData);
  }

  return objectArray;
}

interface TableData {
  "Event ID": string;
  Date: string;
  Location: string;
  Capacity: string;
  Speakers: string;
}
